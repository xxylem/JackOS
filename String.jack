// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int currentLen;
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        if ( maxLength > 0 ) {
            let str = Array.new(maxLength);
        }
        else {
            let str = Array.new(1);
        }
        let currentLen = 0;
        let maxLen = maxLength;

        return this;

    }

    /** Disposes this string. */
    method void dispose() {

        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {

        return currentLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {

        if ( validIndex(j) ) {   
            return str[j];
        }
        else {
            return false;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {

        if ( validIndex(j) ) {
            let str[j] = c;
        }
        
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {

        if ( currentLen < maxLen ) {
            let str[currentLen] = c;
            let currentLen = currentLen + 1;
            return this;
        }
        else {
            return false;
        }
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {

        if (currentLen > 0) {
            let currentLen = currentLen - 1;
        }

        return;        
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {

        var int i, d, val;
        var char currentChar;
        var boolean positive;

        let i = 0;
        let val = 0;

        if ( charAt(0) = 45) {
            let positive = false;
            let i = 1;
        }
        else {
            let positive = true;
        }

        while ( i < currentLen ) {
            let currentChar = charAt(i);

            if (( currentChar > 47 ) & ( currentChar < 58 )) {
                let d = String.char2Int(currentChar);
                let val = ( val * 10 ) + d; 
                let i = i + 1;
            }
            else {
                if (positive) {
                    return val;
                }
                else {
                    return ( - val );
                }
            }
        }

        if (positive) {
            return val;
        }
        else {
            return ( - val );
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

        let currentLen = 0;

        if ( val < 0 ) {
            do appendChar(45);
            let val = - val;
        }

        do int2String(val);

        return;
        
    }

    method void int2String(int val) {

        var int lastDigit, valDiv10;
        var char c;

        let valDiv10 = val / 10;
        let lastDigit = val - (valDiv10 * 10 );
        let c = String.int2Char(lastDigit);

        if ( val < 10 ) {
            do appendChar(c);
        }
        else {
            do int2String(valDiv10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        
        return 128; 
    }

    /** Returns the backspace character. */
    function char backSpace() {

        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {

        return 34;
    }

    /** Checks if index is in range of this.str. */
    method boolean validIndex(int j) {

        return ((j > (-1)) & (j < currentLen));
    }

    function int char2Int(char c) {

        return ( c - 48 );
    }

    function char int2Char(int i) {

        return ( i + 48 );
    }
}


