// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {

        let ram = 0;

        let heap = 2048;
        let freeList = 2048;

        let heap[0] = 14335; //length
        let heap[1] = 0; //next

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if (( address > (-1) ) & ( address < 24577 )) {
            return ram[address];
        }
        else {
            return 0;
        }
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        if (( address > (-1) ) & ( address < 24577 )) {
            let ram[address] = value;
        }

        return;
    }

    function int next(Array a) {
        return a[1];
    }
    function int segmentSize(Array a) {
        return a[0];
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var Array currentSegment, newBlockBaseAddress, previousSegment;
        var int currentSegmentSize, currentNextLocation;

        let currentSegment = freeList;
        let previousSegment = currentSegment;
        let currentSegmentSize = Memory.segmentSize(currentSegment);
        let currentNextLocation = Memory.next(currentSegment);

        while (true) {
            if ( currentSegmentSize > (size + 1) ) { 
                // segment is possible

                if (( currentSegmentSize - size) < 3 ) {
                    let previousSegment[1] = currentNextLocation;
                    let newBlockBaseAddress = currentSegment + 1;
                    return newBlockBaseAddress;
                }
                else {
                    let currentSegment[0] = currentSegmentSize - (size + 1);
                    let currentSegmentSize = Memory.segmentSize(currentSegment);
                    let newBlockBaseAddress = currentSegment + currentSegmentSize;
                    let newBlockBaseAddress[0] = size + 1;
                    return ( newBlockBaseAddress + 1);
                }
            }
            else {
                let previousSegment = currentSegment; //set up pointer in case we need to move it
                let currentSegment = currentNextLocation; //go to next segment
                if (currentSegment = 0) {
                    return 0;
                }

                let currentSegmentSize = Memory.segmentSize(currentSegment);
                let currentNextLocation = Memory.next(currentSegment);
            }
        }

        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        var Array currentSegment;

        let currentSegment = freeList;

        while (true) {

            if ( currentSegment[1] = 0 ) {
                let currentSegment[1] = o - 1;
                let o[0] = 0;
                return;
            }
            else {
                let currentSegment = currentSegment[1];
            }
        }

        return;
    }    
}
